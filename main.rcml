function main() {
	angleServ1=0; angleServInitial1=0; angleServLimit1=360; // - против часовой 
	angleServ2=0; angleServInitial2=0; angleServLimit2=360; // + по часовой
	angleServ3=0; angleServInitial3=0; angleServLimit3=360;
	angleServ4=0; angleServInitial4=0; angleServLimit4=360;
	angleServ5=0; angleServInitial5=0; angleServLimit5=180;
	angleServ6=0; angleServInitial6=0; angleServLimit6=360;

	shoulder1=0.0867;
	shoulder2=0.1067;
	shoulder3=0.1066;
	shoulder4=0.1074;
	
	captureAngle = 0;

	x=0.210;
	y=0.210;
	z=0.030;

	radiansToDegrees=180/3.14159265358979323846;
	degreesToRadians=3.14159265358979323846/180;
	
	if (z > shoulder1){
		distanceToDetails = z - shoulder1;
		tempAngleC = captureAngle + 90 - math::atan(math::sqrt((x * x) + (y * y)) / distanceToDetails) * radiansToDegrees;
		tempAngleB = math::atan(distanceToDetails / math::sqrt((x * x) + (y * y))) * radiansToDegrees;
	} else {
		distanceToDetails = shoulder1 - z;
		tempAngleC = captureAngle - math::atan(distanceToDetails / math::sqrt((x * x) + (y * y))) * radiansToDegrees;
		tempAngleB = - (90 - math::atan(math::sqrt((x * x) + (y * y)) / distanceToDetails) * radiansToDegrees);
	}
	
	lengthTempAQ = math::sqrt(math::pow(distanceToDetails, 2) + (x * x) + (y * y));
	lengthTempAD = math::sqrt(math::pow(lengthTempAQ, 2) + math::pow(shoulder4, 2) - 2 * shoulder4 * lengthTempAQ * math::cos(tempAngleC * degreesToRadians));
	
	if (lengthTempAD <= (shoulder2 + shoulder3)) {
		angleServ4 = math::acos((math::pow(shoulder2, 2) + math::pow(shoulder3, 2) - math::pow(lengthTempAD,2 )) / (2 * shoulder2 * shoulder3)) * radiansToDegrees;
		if (angleServ4 >= angle(angleServInitial4,angleServLimit4)) {
			angleADQ = math::acos((math::pow(lengthTempAD, 2) + math::pow(lengthTempAQ, 2) - math::pow(shoulder4, 2)) / (2 * lengthTempAQ * lengthTempAD)) * radiansToDegrees;
			angleHDA = math::asin(shoulder2 * math::sin(angleServ4 * degreesToRadians) / lengthTempAD) * radiansToDegrees;
			angleServ3 = 180 - tempAngleC - angleADQ + angleHDA;
			if (angleServ3 >= angle(angleServInitial3, angleServLimit3)) {
				angleServ5 = 90 + tempAngleB + 180 - angleServ4 + angleADQ - angleHDA;
				if (angleServ5 >= angle(angleServInitial5, angleServLimit5)) {
					angleServ6 = math::atan(math::abs(x) / math::abs(y)) * radiansToDegrees;
					if ((x >= 0) && (y >= 0)) {
						angleServ6 = angleServ6;
					} else {
						if ((x <= 0) && (y >= 0)){
							angleServ6 = 360 - angleServ6;
						} else {
							if ((x >= 0) && (y <= 0)){
								angleServ6 = 180 - angleServ6;
							} else {
								angleServ6 = 180 + angleServ6;
							}
						}
					}
				} else {
					system::echo("error::angleServ3 = ", angleServ5, " < ", angle(angleServInitial5, angleServLimit5));
				}			
			} else {
				system::echo("error::angleServ3 = ", angleServ3, " < ", angle(angleServInitial3, angleServLimit3));
			}
		} else {
			system::echo("error:angleServ4=", angleServ4, " < ", angle(angleServInitial4, angleServLimit4));
		}
	} else {
		system::echo("wrong angle or X or Y!!!\n");	
	}
	system::echo("\n angleServ1 = ", finalAngle(angleServInitial1, angleServ1));
	system::echo("\n angleServ2 = ", finalAngle(angleServInitial2, angleServ2));
	system::echo("\n angleServ3 = ", finalAngle(angleServInitial3, angleServ3));
	system::echo("\n angleServ4 = ", finalAngle(angleServInitial4, angleServ4));
	system::echo("\n angleServ5 = ", finalAngle(angleServInitial5, angleServ5));
	system::echo("\n angleServ6 = ", angleServ6,"\n");
		
	//@r = robot_servo;
	//@r->move_servo(0,angleServ1);
	//@r->move_servo(1,angleServ2);
	//@r->move_servo(2,angleServ3-90);
	//@r->move_servo(3,278-angleServ4);
	//@r->move_servo(4,angleServ5+15);
	//@r->move_servo(5,angleServ6);
}

function angle(angle, limit) {
	if(angle >= 0){
		if ((limit - angle) >= 180) {
			return 0;
		} else {
			return (180 - (limit - angle));
		}
	} else {
		if (math::abs(angle) >= 180){
			return 0;
		} else {
			return (180 - math::abs(angle));
		}
	} 
}
function finalAngle(angle, angleServ) {
	if (angle >= 0) {
		return ((180 - angleServ) + angle);
	} else {
		return (angle - (180 - angleServ));
	}
}